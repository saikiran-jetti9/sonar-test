buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "com.github.spotbugs.snom:spotbugs-gradle-plugin:5.0.14"
		classpath "com.diffplug.spotless:spotless-plugin-gradle:6.20.0"
		classpath "org.owasp:dependency-check-gradle:8.3.1"
		classpath "com.google.cloud.tools:jib-gradle-plugin:3.3.2"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.0'
	id "com.github.spotbugs" version "5.0.14"
	id "com.diffplug.spotless" version "6.20.0"
	id "org.owasp.dependencycheck" version "8.3.1"
	id 'jacoco'
	id 'org.sonarqube' version '4.0.0.2929'
	id "com.google.cloud.tools.jib" version "3.3.2"
}

group = 'com.bmg'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

// Determine the environment (e.g., prod, uat, test)
def environment = project.hasProperty('appEnvironment') ? project.appEnvironment : ''

// Define a map of versions based on the environment
def versionMap = [
		'test' : '1.0.0-test',
		'uat'  : '1.0.0-uat',
		'prod' : '1.0.0'
]
// Select the dependency version based on the environment, defaulting to 'test' version
def commonVersion = versionMap.get(environment, '1.0.0-test')

// Configure repositories
repositories {
	mavenCentral()

	// Nexus repository URL for common module artifacts
	def nexusUrl = 'https://nexus.bmg.com:443/repository/bmg-trigon-common/'

	// Local repository directory
	def localRepoUrl = '../gradle-repo'

	// Select the repository URL based on the environment
	def repositoryUrl = environment in ['prod', 'uat', 'test'] ? nexusUrl : localRepoUrl

	// Add Maven repository with selected URL
	maven {
		url = uri(repositoryUrl)
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux:3.1.3'
	implementation 'org.flywaydb:flyway-core'
	implementation 'com.okta.spring:okta-spring-boot-starter:3.0.1'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '3.1.2'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'org.springframework.integration:spring-integration-sftp:6.1.2'
	implementation 'org.json:json:20231013'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation group: 'org.hibernate', name: 'hibernate-envers', version: '6.3.1.Final'
	implementation 'com.sendgrid:sendgrid-java:4.9.3'

	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	implementation group: 'org.elasticsearch.client', name: 'elasticsearch-rest-high-level-client', version: '7.17.13'
	implementation 'com.sendgrid:sendgrid-java:4.9.3'
	implementation 'org.apache.poi:poi-ooxml:5.2.3'
	implementation 'com.google.cloud:google-cloud-storage:2.40.1'

	implementation 'com.google.cloud:spring-cloud-gcp-starter-bigquery:4.7.2'
	implementation 'com.okta.spring:okta-spring-boot-starter:3.0.6'


	implementation "com.bmg.trigon.common:bmg-trigon-common:${commonVersion}", {
		/* Enable dynamic version resolution:
		By setting 'changing' to true, Gradle ensures that this dependency
		is treated as subject to change. It will always check for updates
		during dependency resolution, allowing our application to fetch
		the latest version from the repository if available.*/
		changing = true
	}

}

spotbugs {
	ignoreFailures = false
	showStackTraces = true
	showProgress = false
	reportLevel = 'default'
	effort = 'default'
	visitors = [ 'FindSqlInjection', 'SwitchFallthrough' ]
	omitVisitors = [ 'FindNonShortCircuit' ]
	reportsDir = file("$buildDir/reports/spotbugs")
	onlyAnalyze = ['com.bmg.trigon.*']
	projectName = name
	release = version
	extraArgs = [ '-nested:false' ]
	jvmArgs = [ '-Duser.language=ja' ]
	maxHeapSize = '512m'
}

spotless {
	java {
		googleJavaFormat()
	}
}

apply plugin: "com.diffplug.spotless"
apply plugin: "com.github.spotbugs"
apply plugin: "org.owasp.dependencycheck"
apply plugin: "com.google.cloud.tools.jib"

jacocoTestReport {
	reports {
		xml.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/bmg/trigon/dto/**",
					"com/bmg/trigon/enums/**",
					"com/bmg/trigon/model/**",
					"com/bmg/trigon/exception/**",
					"com/bmg/trigon/config/**",
					"com/bmg/trigon/messages/**",
			])
		}))
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

// Git hooks installation task
task installGitHooks(type: Copy) {
	println("Installing git hooks...")

	// Copy pre-commit hook
	from new File(projectDir, 'scripts/pre-commit')
	into { new File(projectDir, '.git/hooks') }
	fileMode 0777

	// Copy commit-msg hook
	from new File(projectDir, 'scripts/commit-msg')
	into { new File(projectDir, '.git/hooks') }
	fileMode 0777
}


assemble.dependsOn installGitHooks

sonar {
	properties {
		property "sonar.coverage.jacoco.xmlReportPath", "${project.buildDir}/reports/jacoco.xml"
		property "sonar.junit.reportPaths", "${project.buildDir}/reports/jacoco.xml"
		property "sonar.verbose", true
		property "sonar.sources", "src/main"
		property "sonar.tests", "src/test"
		property 'sonar.projectVersion', "1.0.21"
		property "sonar.projectKey", "saikiran-jetti9_sonar-test"
    	property "sonar.organization", "saikiran-sonar"
    	property "sonar.host.url", "https://sonarcloud.io"
	}
}
tasks.named('sonar').configure {
	dependsOn test
}

